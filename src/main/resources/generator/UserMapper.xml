<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
					"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
					
<mapper namespace="com.bdqn.dao.UserMapper">

<!-- 	resultMap 用于设置返回值的类型和映射关系 
属性：
		1 id必须填写 ，以此作为被其它地方引用的标识
		2 type必填 ，用于配置查询列所映射到Java的对象类型
		3 extends,选填 可以让当前的resultMap继承其它的resultMap 属性的值为
				其它resultMap的id
		4 autoMapping 选填，true false
-->
	<resultMap id="userMap" type="com.bdqn.bean.SysUser">
<!-- 		它可以包含construtor标签，构造注入，包括两个子标签
子标签：
	idArg：作为唯一的标记	 
 	arg：一个ID结果，标记结果作为id
 	result 注入到java对象属性的普通结果
 	association:复杂类型的集合。
 	collection:复杂类型的集合。
 	discriminator:根据结果值来决定使用哪个结果映射
	
 -->
		<id property="id" column="id" />
		<result property="userName" column="user_name"></result>
		<result property="userPassword" column="user_password"></result>
		<result property="userEmail" column="user_email"></result>
		<result property="userInfo" column="user_info"></result>
		<result property="headImg" column="head_img" jdbcType="BLOB"></result>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"></result>
	</resultMap>
<!-- 	映射查询语句的使用标签，id作为命名空间中的唯一标识符，可以用来代表这条语句，
		resultMap 赋值为上面的resultMap定义的id通过它就可以知道返回什么数据类型 
		
-->
	<select id="selectById" resultMap="userMap">
	<!-- 		下面是用于从查询的sql语句 #{} 这个预编译参数的一种方式
		其中id代表了传入参数的名车子
	 -->
		select * from sys_user where id = #{id}
	</select>
	<select id="selectAll" resultType="com.bdqn.bean.SysUser">
		select id,
			user_name  ,
			user_password  ,
			user_email  ,
			user_info  ,
			head_img   ,
			create_time  
		from sys_user
			
<!-- 		select id, -->
<!-- 			user_name userName, -->
<!-- 			user_password userPassword, -->
<!-- 			user_email userEmail, -->
<!-- 			user_info userInfo, -->
<!-- 			head_img  headImg, -->
<!-- 			create_time createTime -->
<!-- 		from sys_user -->
			
			
	</select>
	
	<select id="selectRolesByUserId" resultType="com.bdqn.bean.SysRole">
		select
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u 
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId}
	</select>
	
<!-- 	jdbcType=时间日期，jdbcType只能是date或者timestamp
		不可以是time或者datetime
 -->
	<insert id="insert">
		insert into sys_user(
			id,user_name,user_password,user_email,user_info,head_img,create_time
		)
		values(
			#{id},#{userName},#{userPassword},#{userEmail},#{userInfo},
			#{headImg,jdbcType=BLOB},
			#{createTime,jdbcType=TIMESTAMP}
			
		)
	</insert>
	
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
			user_name,user_password,user_email,user_info,head_img,create_time
		)
		values(
			#{userName},#{userPassword},#{userEmail},#{userInfo},
			#{headImg,jdbcType=BLOB},
			#{createTime,jdbcType=TIMESTAMP}
			
		)
	</insert>
	
	<insert id="insert3" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
			user_name,user_password,user_email,user_info,head_img,create_time
		)
		values(
			#{userName},#{userPassword},#{userEmail},#{userInfo},
			#{headImg,jdbcType=BLOB},
			#{createTime,jdbcType=TIMESTAMP}
			
		)
<!-- 		这种方式可以通吃，不管有没有自增长都可以搞定
		keyColumn指定数据库列名
		keyProperty指定POJO里面的字段名
		resultType用于指定返回值类型
		order属性设置和数据库有关系
		mysql是after
		oracle则是before
 -->
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<update id="updateById">
		update sys_user
		set user_name = #{userName},
			user_email = #{userEmail},
			user_info  = #{userInfo},
			head_img = #{headImg,jdbcType=BLOB},
			create_time = #{createTime,jdbcType=TIMESTAMP}
		where id = #{id}
	</update>
	
</mapper>



<!-- <mapper namespace="com.bdqn.mapper.UserMapper"> -->
<!--   	如果有两个mapper文件都是selectAll，会有冲突，书写查询语句的时候就需要命名空间加上id比如com.bdqn.mapper.Usermapper.selectAll    -->
<!-- 	<select id="selectAll" resultType="User"> -->
<!-- 		select * from users -->
<!-- 	</select>  -->
<!-- 	<select id="selectById" resultType="User"> -->
<!-- 		select * from users where id = #{id} -->
<!-- 	</select> -->
	
<!-- 	<select id="selectByUsername" resultType="User"> -->
<!-- 		select * from users where username = #{username} -->
<!-- 	</select> -->
<!-- </mapper> -->